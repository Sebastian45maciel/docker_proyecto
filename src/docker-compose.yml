services:
  frontend:
    build:
      context: ../
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - mynetwork
    
    
  backend:
    build:
      context: ../backend
    ports:
      - "5000:5000"
    environment:
      MYSQL_HOST: db
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DB: ${MYSQL_DB}
      FRONTEND_ORIGIN: ${FRONTEND_ORIGIN}
    depends_on:
      - db
    networks:
      - mynetwork
    
  db:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      MYSQL_USER: flaskuser
      MYSQL_PASSWORD: flaskpass
      MYSQL_DATABASE: flaskdb
    networks:
      - mynetwork
   
    
  nginx:
    build:
      context: ../nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/certs:/etc/nginx/certs
    depends_on:
      - backend
    networks:
      - mynetwork
    
    
  portainer:
    image: portainer/portainer-ce
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mynetwork
   
    
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    networks:
      - mynetwork
  
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    networks:
      - mynetwork


  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
      - ./promtail.yaml:/etc/promtail/promtail.yaml
    command: -config.file=/etc/promtail/promtail.yaml
    restart: always
    networks:
      - mynetwork

    
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-config:/etc/prometheus
  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
  backup:
    image: alpine
    volumes:
      - ./backups:/backups
    entrypoint: ["sh", "-c", "echo '0 3 * * * mysqldump -u flaskuser -pflaskpass flaskdb > /backups/db_backup.sql' | crontab - && crond -f"]
  grafana:
    image: grafana/grafana
    ports:
      - "4000:3000"  # usa 4000 en tu host para evitar conflicto con React
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - mynetwork
    restart: always

volumes:
  grafana_data:





networks:
  mynetwork:
    driver: bridge
